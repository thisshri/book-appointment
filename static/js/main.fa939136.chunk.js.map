{"version":3,"sources":["containers/Appointment/index.js","containers/AppointmentDetails/index.js","actions.js","reducers.js","store.js","App.js","serviceWorker.js","index.js"],"names":["TIME_SLOT","connect","appointments","useParams","date","month","year","history","useHistory","currentDate","bookingData","useMemo","gotoDate","useCallback","day","moment","add","format","split","changeDate","newDate","push","parseInt","formatTime","time","to","className","Container","onClick","role","Row","Col","map","key","Button","FIRST_NAME","LAST_NAME","MOBILE_NUMBER","updateAppointment","fromTime","userData","type","timeFrom","DATA","useState","userDetails","setUserDetails","updateFormData","e","target","dataset","value","InputGroup","FormControl","placeholder","aria-label","aria-describedby","data-type","onChange","isInvalid","Form","Control","Feedback","goBack","variant","error","obj","forEach","detail","JSON","parse","localStorage","getItem","initialState","reducer","combineReducers","state","action","setItem","stringify","store","createStore","install","App","path","component","AppointmentDetails","Appointment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fa939136.chunk.js","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nimport {\n  useParams,\n  useHistory,\n  Link,\n  Redirect,\n} from 'react-router-dom';\n\nimport './styles.scss';\n\nimport {\n  Container,\n  Button,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nconst TIME_SLOT = [9, 10, 11, 12, 13, 14, 15, 16];\n\nconst Appointment = ({\n  appointments,\n}) => { \n  let { date, month, year } = useParams();\n  const history = useHistory();\n  const currentDate = `${date}/${month}/${year}`;\n\n  const bookingData = useMemo(\n    () => (appointments && appointments[currentDate] || {}),\n    [appointments, currentDate]\n  );\n\n  const gotoDate = useCallback(\n    (day) => (\n      moment(`${date}/${month}/${year}`, \"D/M/YYYY\").add(day, \"days\").format('D-M-YYYY').split('-')\n    ), [date, month, year]\n  );\n\n  const changeDate = useCallback(\n    (newDate) => ( \n      history.push(\n        `/${parseInt(newDate[0])}/${parseInt(newDate[1])}/${parseInt(newDate[2])}/`\n      )\n    ), [history]\n  )\n\n  const formatTime = useCallback(\n    (time) => {\n      if (time < 12) {\n        return `${time} AM`\n      }\n\n      if (time > 12) {\n        time = time - 12;\n      }\n    \n      return `${time} PM`\n    }, []\n  );\n\n  if (!(date && month && year)) {\n    const currentDate = moment();\n    date = currentDate.date();\n    month = currentDate.month() + 1;\n    year = currentDate.year();\n    return (\n      <Redirect to={`/${date}/${month}/${year}/`} />\n    )\n  }\n \n  return (\n    <div className=\"AppointmentWrapper\">\n      <div className=\"navWrapper\">\n        <Container className=\"nav\">\n          <div onClick={() => changeDate(gotoDate(-1))} className=\"button\"><span role=\"img\">⬅</span>️</div>\n          <h2>{currentDate}</h2>\n          <div onClick={() => changeDate(gotoDate(1))} className=\"button\"><span role=\"img\">➡</span></div>\n        </Container>\n      </div>\n    <Container>\n      <Row>\n        <Col className=\"mx-3\">\n          <h2 className=\"mt-5\">\n            Select A Time Slot\n          </h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          { TIME_SLOT.map(\n              time => (\n                <Link key={time} to={`${time}/details/`}>\n                  <Button className={bookingData[time] && \"booked\"}>\n                    { formatTime(time) } to { formatTime(++time) }\n                  </Button>\n                </Link>\n              )\n            )\n          }\n        </Col>\n      </Row>\n    </Container>\n    </div>\n  );\n }\n\nexport default connect(\n  ({appointments}) => ({\n    appointments,\n  })\n)(Appointment);\n","import React, { useState, useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  useParams,\n  useHistory,\n} from 'react-router-dom';\n\nimport { updateAppointment } from 'actions.js';\n\nimport './styles.scss';\n\nimport {\n  Container,\n  Button,\n  Row,\n  Form,\n  Col,\n  InputGroup,\n  FormControl,\n} from 'react-bootstrap';\n\nconst FIRST_NAME = \"firstName\";\nconst LAST_NAME = \"lastName\";\nconst MOBILE_NUMBER = \"mobile\";\n\nconst AppointmentDetails = ({\n  appointments,\n  updateAppointment,\n}) => { \n  let { date, month, year, timeFrom} = useParams();\n  const currentDate = `${date}/${month}/${year}`;\n  const history = useHistory();\n  const DATA = useMemo(\n    () => appointments && appointments[currentDate] || {},\n    [appointments, currentDate]\n  );\n  const [userDetails, setUserDetails] = useState(\n    DATA[timeFrom] || {}\n  );\n\n  const updateFormData = (e) => {\n    setUserDetails(\n      {\n        ...userDetails,\n        [e.target.dataset.type]: e.target.value,\n      }\n    );\n  } \n   \n  const onClickSave = () => {\n    let error = false;\n    let obj = {\n      ...userDetails\n    };\n\n    [FIRST_NAME,  MOBILE_NUMBER, LAST_NAME].forEach(\n      detail => { \n        if (!userDetails[detail]) {\n          error = true;\n          obj = {\n              ...obj,\n              [detail]: \"\",\n          }\n        }\n      }\n    )\n\n    setUserDetails(\n      obj\n    );\n\n    if (error) {\n      return\n    }\n\n    updateAppointment(currentDate, timeFrom, obj);\n        \n    history.goBack();\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1 className=\"mt-5\">\n            Please Fill Your Details\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"my-5\">\n        <Col>\n          <InputGroup className=\"mb-4\">\n            <FormControl\n              placeholder=\"First Name\"\n              aria-label=\"First Name\"\n              aria-describedby=\"First Name\"\n              data-type={FIRST_NAME}\n              onChange={updateFormData}\n              isInvalid={userDetails[FIRST_NAME] === \"\"}\n              value={userDetails[FIRST_NAME]}\n            />\n            <Form.Control.Feedback className=\"error\" type=\"invalid\">\n              Please enter your first name\n            </Form.Control.Feedback>\n          </InputGroup>\n          <InputGroup className=\"mb-4\">\n            <FormControl\n              placeholder=\"Last Name\"\n              aria-label=\"Last Name\"\n              aria-describedby=\"Last Name\"\n              data-type={LAST_NAME}\n              onChange={updateFormData}\n              isInvalid={userDetails[LAST_NAME] === \"\"}\n              value={userDetails[LAST_NAME]}\n            />\n            <Form.Control.Feedback className=\"error\" type=\"invalid\">\n              Please enter your last name\n            </Form.Control.Feedback>\n          </InputGroup>\n          <InputGroup>\n            <FormControl\n              placeholder=\"Mobile Number\"\n              aria-label=\"First Name\"\n              aria-describedby=\"First Name\"\n              data-type={MOBILE_NUMBER}\n              onChange={updateFormData}\n              isInvalid={userDetails[MOBILE_NUMBER] === \"\"}\n              value={userDetails[MOBILE_NUMBER]}\n            />\n            <Form.Control.Feedback className=\"error\" type=\"invalid\">\n              Please enter your mobile number\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Col>\n      </Row>\n      <Row className=\"buttons\">\n        <Col>\n          <Button\n            onClick={() => history.goBack()}\n            variant=\"secondary\">\n            Cancel\n          </Button>\n        </Col>\n        <Col>\n          <Button\n            onClick={onClickSave}\n          >\n            Save\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n }\n\nexport default connect(\n  ({appointments}) => ({\n    appointments,\n  }),\n  {\n    updateAppointment,\n  }\n)(AppointmentDetails);\n","const updateAppointment = (\n  date,\n  fromTime,\n  userData\n) => (\n  {\n    date,\n    fromTime,\n    userData,\n    type: 'UPDATE_APPOINTMENT',\n  }\n);\n\nexport {\n  updateAppointment,\n}","const DATA = JSON.parse(\n  localStorage.getItem(\"Data\")\n) || {}\n\nconst initialState = {\n  ...DATA\n};\n\nfunction appointments(state = initialState, action) {\n  switch(action.type) {\n  case 'UPDATE_APPOINTMENT':\n    if (!state[action.date]) {\n      state[action.date] = {\n        [action.fromTime]: action.userData,\n      }\n    } else {\n      state[action.date][action.fromTime] = action.userData;\n    }\n    localStorage.setItem( 'Data', JSON.stringify(state))\n    return {\n      ...state,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport {\n  appointments\n}\n","import { createStore } from 'redux';\nimport { combineReducers, install } from 'redux-loop';\n\nimport { appointments } from './reducers';\n\nconst reducer = combineReducers({\n    appointments\n});\n\nconst store = createStore(reducer, {}, install());\n\nexport default store;\n","import React from 'react';\nimport './App.css';\n\nimport Appointment from 'containers/Appointment';\nimport AppointmentDetails from 'containers/AppointmentDetails';\nimport { Provider } from 'react-redux';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport store from './store.js';\n\nfunction App() {\n  return (\n    <Router>\n      <Provider store={store}>\n        <Switch>\n          <Route path=\"/:date/:month/:year/:timeFrom/details\" component={AppointmentDetails}/>\n          <Route path=\"/:date?/:month?/:year?/\" component={Appointment}/>\n        </Switch>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}